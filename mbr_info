#!/usr/bin/env python3
import hashlib
import sys
import binascii
import struct

# via DeathByGunboat - discord
woahbro = {
    '0' : "Empty",
    '1' : "FAT12",
    '2' : "XENIX root",
    '3' : "XENIX usr",
    '4' : "FAT16 <32M",
    '5' : "Extended",
    '6' : "FAT16",
    '7' : "HPFS/NTFS/exFAT",
    '8' : "AIX",
    '9' : "AIX bootable",
    'a' : "OS/2 Boot Manag",
    'b' : "W95 FAT32",
    'c' : "W95 FAT32 (LBA)",
    'e' : "W95 FAT16 (LBA)",
    'f' : "W95 Ext'd (LBA)",
    '10' : "OPUS",
    '11' : "Hidden FAT12",
    '12' : "Compaq diagnost",
    '14' : "Hidden FAT16 <3",
    '16' : "Hidden FAT16",
    '17' : "Hidden HPFS/NTF",
    '18' : "AST SmartSleep",
    '1b' : "Hidden W95 FAT3",
    '1c' : "Hidden W95 FAT3",
    '1e' : "Hidden W95 FAT1",
    '24' : "NEC DOS",
    '27' : "Hidden NTFS Win",
    '39' : "Plan 9",
    '3c' : "PartitionMagic",
    '40' : "Venix 80286",
    '41' : "PPC PReP Boot",
    '42' : "SFS",
    '4d' : "QNX4.x",
    '4e' : "QNX4.x 2nd part",
    '4f' : "QNX4.x 3rd part",
    '50' : "OnTrack DM",
    '51' : "OnTrack DM6 Aux",
    '52' : "CP/M",
    '53' : "OnTrack DM6 Aux",
    '54' : "OnTrackDM6",
    '55' : "EZ-Drive",
    '56' : "Golden Bow",
    '5c' : "Priam Edisk",
    '61' : "SpeedStor",
    '63' : "GNU HURD or Sys",
    '64' : "Novell Netware",
    '65' : "Novell Netware",
    '70' : "DiskSecure Mult",
    '75' : "PC/IX",
    '80' : "Old Minix",
    '81' : "Minix / old Lin",
    '82' : "Linux swap / So",
    '83' : "Linux",
    '84' : "OS/2 hidden C:",
    '85' : "Linux extended",
    '86' : "NTFS volume set",
    '87' : "NTFS volume set",
    '88' : "Linux plaintext",
    '8e' : "Linux LVM",
    '93' : "Amoeba",
    '94' : "Amoeba BBT",
    '9f' : "BSD/OS",
    'a0' : "IBM Thinkpad hi",
    'a5' : "FreeBSD",
    'a6' : "OpenBSD",
    'a7' : "NeXTSTEP",
    'a8' : "Darwin UFS",
    'a9' : "NetBSD",
    'ab' : "Darwin boot",
    'af' : "HFS / HFS+",
    'b7' : "BSDI fs",
    'b8' : "BSDI swap",
    'bb' : "Boot Wizard hid",
    'be' : "Solaris boot",
    'bf' : "Solaris",
    'c1' : "DRDOS/sec (FAT-",
    'c4' : "DRDOS/sec (FAT-",
    'c6' : "DRDOS/sec (FAT-",
    'c7' : "Syrinx",
    'da' : "Non-FS data",
    'db' : "CP/M / CTOS / .",
    'de' : "Dell Utility",
    'df' : "BootIt",
    'e1' : "DOS access",
    'e3' : "DOS R/O",
    'e4' : "SpeedStor",
    'eb' : "BeOS fs",
    'ee' : "GPT",
    'ef' : "EFI (FAT-12/16/",
    'f0' : "Linux/PA-RISC b",
    'f1' : "SpeedStor",
    'f4' : "SpeedStor",
    'f2' : "DOS secondary",
    'fb' : "VMware VMFS",
    'fc' : "VMware VMKCORE",
    'fd' : "Linux raid auto",
    'fe' : "LANstep",
    'ff' : "BBT" }

fname = sys.argv[1]

# https://www.quickprogrammingtips.com/python/how-to-calculate-md5-hash-of-a-file-in-python.html
hash5 = hashlib.md5()
hash256 = hashlib.sha256()
with open(fname,"rb") as f:
    for block in iter(lambda: f.read(4096),b""):
        hash5.update(block)
        hash256.update(block)

#https://stackoverflow.com/questions/46109815/convert-string-from-big-endian-to-little-endian-or-vice-versa-in-python
def int2bytes(i, enc):
    return i.to_bytes((i.bit_length() + 7) // 8, enc)
def convert_hex(str, enc1, enc2):
    return int2bytes(int.from_bytes(bytes.fromhex(str), enc1), enc2).hex()

hex5 = hash5.hexdigest()
file5 = open('MD5-'+fname+'.txt', "w")
file5.write(hex5)
file5.close()

hex256 = hash256.hexdigest()
file256 = open('SHA-256-'+fname+'.txt', "w")
file256.write(hex256)
file256.close()

# https://books.google.com/books?id=7O-cBAAAQBAJ&pg=PA24&lpg=PA24&dq=struct.unpack(%27%3CI%27,+mbr%5B0x1C6:0x1CA%5D)&source=bl&ots=wx-EIkYjVZ&sig=ACfU3U0OoIY62DO-dVFaBtyVyfzZRmdMZA&hl=en&sa=X&ved=2ahUKEwjB6q_tnNz6AhU1LkQIHSFxD9kQ6AF6BAgIEAM#v=onepage&q&f=false
mbr = bytearray() 
try:
    bfile = open(fname, 'rb')
finally:
    mbr = bfile.read() 

partitions = []

# loop through all of the partitions and format the data
# for i in range(4):

enderecoS = 0x228
hexprtStart = mbr[enderecoS:0x230].hex()
hexprtStart = convert_hex(hexprtStart, 'big', 'little')

enderecoE = 0x230
hexprtEnd = mbr[0x230:0x238].hex()
hexprtEnd = convert_hex(hexprtEnd, 'big', 'little')

print("The start address is: ", hexprtStart)
print("The end address is: ", hexprtEnd)

    # strprt = str(hexprt)
    # strprt = strprt.replace("0x", "")

    # address = str(struct.unpack('<i', mbr[endereco+4:endereco+8]))
    # address = address.replace("(", "000000")
    # address = address.replace(",", "")
    # address = address.replace(")", "")

    # size = str(struct.unpack('<i', mbr[endereco+8:endereco+12]))
    # size = size.replace("(", "000000")
    # size = size.replace(",", "")
    # size = size.replace(")", "")

    # if(len(strprt) == 1):
    #     print( '(0' + strprt + ') ' + woahbro[strprt] + ', ' + address + ', ' + size )
    # else:
    #     print( '(' + strprt + ') ' + woahbro[strprt] + ', ' + address + ', ' + size )

    # address = int(address)*512+512-16

    # end = mbr[address: address+16]
    # yassify = str(binascii.hexlify(end))
    # yassify = yassify[1:]
    # yassify = yassify.replace("'", "")

    # finalyassify = ""

    # for i in range(0, len(yassify), 2):
    #     finalyassify = finalyassify + ' ' + yassify[i:i+2]

    # partitions.insert(i, finalyassify)

# for i in range(4):

#     print("Partition number:" + str(i+1))

#     print('Last 16 bytes of boot record:' + partitions[i])